{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Docs"},{"location":"/index.html#docs","text":"This is the introduction for doradilla library.\nSingle truth principle Database Single truth principle Database null field error Engagement entity add to database Slick query overflow Shadow query Inconsistent status Daily schedule job Oauth2 client for Pac4j NIO and Akka-Http","title":"Docs"},{"location":"/singletruthprinciple.html","text":"","title":"Single truth principle"},{"location":"/singletruthprinciple.html#single-truth-principle","text":"","title":"Single truth principle"},{"location":"/database/index.html","text":"","title":"Database Single truth principle"},{"location":"/database/index.html#database-single-truth-principle","text":"DB service","title":"Database Single truth principle"},{"location":"/database/dbservice.html","text":"","title":"DB service"},{"location":"/database/dbservice.html#db-service","text":"In traditional way, the database service will be implemented in this way:\nController import scala.concurrent.ExecutionContext\n\n@Singleton\nclass UserController @Inject()(userServiceRead: UserRead,\n                               userServiceWrite: UserWrite,\n                                ...)\n                              (implicit ec: ExecutionContext) extends AbstractController(cc) {\n    ...\n\n} Database package db\n\nimport scala.concurrent.Future\n\n\ntrait UserDAO {\n  def lookup(id: String): Future[Option[User]]\n\n  def create(user: User): Future[Int]\n    ...\n\n}\n\n\ncase class User(id: String, email: String)\n\n\n Database impl package db.impl\n\nclass SlickUserDAO @Inject()(db: Database)(implicit ec: ExecutionContext) extends UserDAO with DbTables {\n\n  import profile.api._\n\n  override def lookup(id: String): Future[Option[User]] = {\n    val f: Future[Option[UsersRow]] = db.run(queryById(id).result.headOption)\n    f.map { maybeRow => maybeRow.map(usersRowToUser) }\n  }\n\n  override def create(user: User): Future[Int] = {\n    db.run(\n      Users += userToUsersRow(user)\n    )\n  }\n\n  ...\n}\n Read package service\n\n  ...\n\ntrait UserRead {\n  def lookup(id: String): Future[Option[User]]\n} Read Impl package service.impl\n\nimport scala.concurrent.ExecutionContext\n\nclass UserReadImpl @Inject()(userDAO: UserDAO)(implicit ec: ExecutionContext) extends UserRead {\n  override def lookup(id: String): Future[Option[User]] = {\n    userDAO.lookup(id)\n  }\n} Write package service\n\ntrait UserWrite {\n  def create(user: User): Future[Int]\n} Write Impl package service.impl\n\n\n@Singleton\nclass UserWriteImpl @Inject()(userDAO: UserDAO)(implicit ec: ExecutionContext) extends UserWrite {\n  override def create(user: User): Future[Int] = {\n    userDAO.create(user)\n  }\n} Module class Module(environment: Environment,\n             configuration: Configuration) extends AbstractModule {\n  override def configure(): Unit = {\n      ...\n    bind(classOf[UserDAO]).to(classOf[SlickUserDAO])\n    bind(classOf[UserRead]).to(classOf[UserReadImpl])\n    bind(classOf[UserWrite]).to(classOf[UserWriteImpl])\n      ...\n  }\n}","title":"DB service"},{"location":"/fieldnull/index.html","text":"","title":"Database null field error"},{"location":"/fieldnull/index.html#database-null-field-error","text":"","title":"Database null field error"},{"location":"/fieldnull/index.html#user-bug-report","text":"User report error when they want to define report types for fund in engagemnt:\nWhen check the request in the network:\nCompare with valid request in network:\nWe will find that id is missing in the payload.","title":"User bug report"},{"location":"/fieldnull/index.html#database-check","text":"Check the database:\nIt seems the fund_admin_id field is null, we fix this issue, then user could define report types now. But we check the production database, we will find the field will be set to null by application:\n4:20:13 PM: mysql> SELECT id,fund_admin_id,fund_admin FROM awm.funds;\n+--------------------------------------+---------------+-----------------+\n| id                                   | fund_admin_id | fund_admin      |\n+--------------------------------------+---------------+-----------------+\n| 02635de9-97d8-4520-90f3-68a53e3d6518 | 1             | HSBC IMS        |\n| 03361d5c-531e-411f-8a57-e02eaffa81e7 | 1             | HSBC IMS        |\n\n\n| 8be5db7b-3358-4e3d-a572-839f2f765ed9 | 1             | HSBC IMS        |\n| 918bb23a-c5ff-4a91-a822-bf8f8416fadd | 1             | HSBC IMS        |\n| 930131cb-9c91-44b0-88e7-12460949dcae | 1             | HSBC IMS        |\n| 961c5a46-9a87-4084-ac0d-408c436522d8 | 1             | HSBC IMS        |\n| a6e44dc6-b72e-4b23-8d1d-b885c8561e83 | 2             | HSBC MultiFonds |\n| b1109ece-7686-4efb-93d6-81e00356c736 | 1             | HSBC IMS        |\n| b8c1cb44-c60e-482c-9b7f-67abc6165a75 | 1             | HSBC IMS        |    ********\n| be3de937-5c8a-45d7-8619-047a50785430 | 1             | HSBC IMS        |\n| cb4c2be3-78b4-4edb-b08f-11b66fb4ee1e | 1             | HSBC IMS        |\n| d2bbb0ec-50c1-44b6-8039-686daf8e137f | 1             | HSBC IMS        |\n| ebbae85a-52f1-4445-9dbb-79e6d2bd8db1 | 1             | HSBC IMS        |\n| f872f26e-21fe-4d12-b23e-baa0635d8ebf | 3             | HSBC Geneva     |\n| f9c9eb38-7a1c-43c0-9678-c4562594449b | 1             | HSBC IMS        |\n| fb488f25-d2e8-47d2-9090-6807c9960c01 | 1             | HSBC IMS        |\n| fbec119f-7e68-4cbc-905b-b40db35f0a2f | 1             | HSBC IMS        |\n+--------------------------------------+---------------+-----------------+\n43 rows in set (0.00 sec) \n\n\n\n5:38:27 PM: mysql> SELECT id,fund_admin_id,fund_admin FROM awm.funds; \n+--------------------------------------+---------------+-----------------+\n| id                                   | fund_admin_id | fund_admin      |\n+--------------------------------------+---------------+-----------------+\n| 02635de9-97d8-4520-90f3-68a53e3d6518 | 1             | HSBC IMS        |\n| 03361d5c-531e-411f-8a57-e02eaffa81e7 | 1             | HSBC IMS        |\n| 049d9aa4-2822-4bcd-8ec7-1b6bef3cd628 | 1             | HSBC IMS        |\n| 0a1938df-a03a-45c8-8c3a-86e4bd52d92c | 1             | HSBC IMS        |\n\n\n| 961c5a46-9a87-4084-ac0d-408c436522d8 | 1             | HSBC IMS        |\n| a6e44dc6-b72e-4b23-8d1d-b885c8561e83 | 2             | HSBC MultiFonds |\n| b1109ece-7686-4efb-93d6-81e00356c736 | 1             | HSBC IMS        |\n| b42ab859-ff5a-4fe0-b283-fe0c98c88392 | 1             | HSBC IMS        |\n| b8c1cb44-c60e-482c-9b7f-67abc6165a75 | NULL          | HSBC IMS        |   ********\n| be3de937-5c8a-45d7-8619-047a50785430 | 1             | HSBC IMS        |\n| cb4c2be3-78b4-4edb-b08f-11b66fb4ee1e | 1             | HSBC IMS        |\n| d2bbb0ec-50c1-44b6-8039-686daf8e137f | 1             | HSBC IMS        |\n| ebbae85a-52f1-4445-9dbb-79e6d2bd8db1 | 1             | HSBC IMS        |\n| f872f26e-21fe-4d12-b23e-baa0635d8ebf | 3             | HSBC Geneva     |\n| f9c9eb38-7a1c-43c0-9678-c4562594449b | 1             | HSBC IMS        |\n| fb488f25-d2e8-47d2-9090-6807c9960c01 | 1             | HSBC IMS        |\n| fbec119f-7e68-4cbc-905b-b40db35f0a2f | 1             | HSBC IMS        |\n+--------------------------------------+---------------+-----------------+\n44 rows in set (0.00 sec)","title":"Database check"},{"location":"/fieldnull/index.html#database-define","text":"The database define as below:\nFund create table `funds`(\n   `id` varchar(128) NOT NULL,\n   `name` VARCHAR(128) not null,\n    fund_admin_id varchar(128) null,\n   `fund_type` VARCHAR(128) not null,\n   `legal_structure` VARCHAR(128) not null,\n   `base_currency` VARCHAR(128) not null,\n   `audit_period_begin` TIMESTAMP not null,\n   `audit_period_end` TIMESTAMP not null,\n   `fund_admin` VARCHAR(128) not null,\n   `admin_code` VARCHAR(128) NULL,\n   `createby` VARCHAR(128) NULL,\n   `createdatetime`  TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,\n   `modifyby` VARCHAR(128) NULL,\n   `modifydatetime`  TIMESTAMP  NULL,\n   PRIMARY KEY (`id`)\n) FundAdmin create table `fund_admin`(\n    `id` varchar(128) NOT NULL,\n    `name` varchar(128) NOT NULL,\n    PRIMARY KEY (`id`)\n)","title":"Database define"},{"location":"/fieldnull/index.html#code-check","text":"The field fund_admin_id in fund table is queried from fund admin table.\nCreate fund override def create(fund: Fund, engagementId:String): Future[Int] = {\n  engagementDAO.lookup(engagementId).flatMap(maybeEngagement => {\n    maybeEngagement match {\n      case engagement => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.create(fund, engagementId)\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        }).flatMap(resFund => {\n          var fundEngagement = new FundEngagementData(randomUUID().toString, engagementId, resFund.id, None, resFund.createby, Some(new Timestamp(DateTime.now.getMillis)))\n          fundEngagementDAO.create(fundEngagement)\n        })\n      }\n      case _ => {\n        throw new Exception(s\"engagement with this Id doesn't exist\")\n      }\n    }\n  })\n}\n Update fund override def update(fund: Fund): Future[Int] = {\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.update(fund).flatMap(updateResult => {\n                fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                  fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n                })\n              })\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundsDAO.update(fund).flatMap(res =>fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements =>{\n          fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result =>{\n            egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n          })\n        }))\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(fund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n}\nThen we find in update fund, the second branch doesn’t retrieve fund_admin_id, so this may lead the null field\nSo we need to fix the issue by add query:\nFix one: by add query for second branch override def update(fund: Fund): Future[Int] = {\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.update(fund).flatMap(updateResult => {\n                fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                  fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n                })\n              })\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fundsDAO.update(fund).flatMap(res => fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result => {\n                  egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n                })\n              }))\n            }\n            case _ => {\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(fund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n} Fix two: by add shared query override def update(fund: Fund): Future[Int] = {\n  val newFundFuture =  fundAdminDAO.queryByFundAdmin(fund.fundAdmin).map{\n    tmpOpt =>tmpOpt match{\n      case Some(fundAdmin)=>fund.copy(fundAdminId = Some(fundAdmin.id))\n      case _=>fund\n    }\n  }\n  val newFund = Await.result(newFundFuture, 1 second)\n\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundsDAO.update(newFund).flatMap(updateResult => {\n          fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n            fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n          })\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundsDAO.update(newFund).flatMap(res => fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n          fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result => {\n            egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n          })\n        }))\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(newFund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n}","title":"Code check"},{"location":"/fieldnull/index.html#after-fix","text":"Question 1, what’s the root cause of the issue?\nThe Fund table contains redundant information of FundAdmin table The update function has multiple paths, and don’t use shared function The shared function should in out of update scope.\nQuestion 2, how to use the single truth principle to resolve issues above?","title":"After fix"},{"location":"/fieldnull/code/index.html","text":"","title":"Database define"},{"location":"/fieldnull/code/index.html#database-define","text":"The database define as below:\nFund create table `funds`(\n   `id` varchar(128) NOT NULL,\n   `name` VARCHAR(128) not null,\n    fund_admin_id varchar(128) null,\n   `fund_type` VARCHAR(128) not null,\n   `legal_structure` VARCHAR(128) not null,\n   `base_currency` VARCHAR(128) not null,\n   `audit_period_begin` TIMESTAMP not null,\n   `audit_period_end` TIMESTAMP not null,\n   `fund_admin` VARCHAR(128) not null,\n   `admin_code` VARCHAR(128) NULL,\n   `createby` VARCHAR(128) NULL,\n   `createdatetime`  TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,\n   `modifyby` VARCHAR(128) NULL,\n   `modifydatetime`  TIMESTAMP  NULL,\n   PRIMARY KEY (`id`)\n) FundAdmin create table `fund_admin`(\n    `id` varchar(128) NOT NULL,\n    `name` varchar(128) NOT NULL,\n    PRIMARY KEY (`id`)\n)","title":"Database define"},{"location":"/fieldnull/code/index.html#code-check","text":"The field fund_admin_id in fund table is queried from fund admin table.\nCreate fund override def create(fund: Fund, engagementId:String): Future[Int] = {\n  engagementDAO.lookup(engagementId).flatMap(maybeEngagement => {\n    maybeEngagement match {\n      case engagement => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.create(fund, engagementId)\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        }).flatMap(resFund => {\n          var fundEngagement = new FundEngagementData(randomUUID().toString, engagementId, resFund.id, None, resFund.createby, Some(new Timestamp(DateTime.now.getMillis)))\n          fundEngagementDAO.create(fundEngagement)\n        })\n      }\n      case _ => {\n        throw new Exception(s\"engagement with this Id doesn't exist\")\n      }\n    }\n  })\n}\n Update fund override def update(fund: Fund): Future[Int] = {\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.update(fund).flatMap(updateResult => {\n                fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                  fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n                })\n              })\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundsDAO.update(fund).flatMap(res =>fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements =>{\n          fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result =>{\n            egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n          })\n        }))\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(fund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n}\nThen we find in update fund, the second branch doesn’t retrieve fund_admin_id, so this may lead the null field\nSo we need to fix the issue by add query:\nFix one: by add query for second branch override def update(fund: Fund): Future[Int] = {\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fund.fundAdminId = Some(fundAdmin.id)\n              fundsDAO.update(fund).flatMap(updateResult => {\n                fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                  fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n                })\n              })\n            }\n            case _ =>{\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundAdminDAO.queryByFundAdmin(fund.fundAdmin).flatMap(optionFundAdmin => {\n          optionFundAdmin match {\n            case Some(fundAdmin) => {\n              fundsDAO.update(fund).flatMap(res => fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n                fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result => {\n                  egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n                })\n              }))\n            }\n            case _ => {\n              throw new Exception(s\"fund admin doesn't exist\")\n            }\n          }\n        })\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(fund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n} Fix two: by add shared query override def update(fund: Fund): Future[Int] = {\n  val newFundFuture =  fundAdminDAO.queryByFundAdmin(fund.fundAdmin).map{\n    tmpOpt =>tmpOpt match{\n      case Some(fundAdmin)=>fund.copy(fundAdminId = Some(fundAdmin.id))\n      case _=>fund\n    }\n  }\n  val newFund = Await.result(newFundFuture, 1 second)\n\n  fundsDAO.lookup(fund.id).flatMap(maybeFund => {\n    maybeFund match {\n\n      //if fundAdmin changed, should update fund admin id and remove fund selection types\n      case Some(existingFund) if(existingFund.fundAdmin != fund.fundAdmin) => {\n        fundsDAO.update(newFund).flatMap(updateResult => {\n          fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n            fundEngagementReportTypeSelectionDAO.deleteByEngagementIds(engagements.map(_.id))\n          })\n        })\n      }\n      //if fund audit period or accurency changed, should clear uploaded reports and ega.\n      case Some(exisitingFund) if(!exisitingFund.auditPeriodBegin.equals(fund.auditPeriodBegin) || !exisitingFund.auditPeriodEnd.equals(fund.auditPeriodEnd) || !exisitingFund.baseCurrency.equals(fund.baseCurrency)) => {\n        fundsDAO.update(newFund).flatMap(res => fundEngagementDAO.queryByFundId(fund.id).flatMap(engagements => {\n          fundEngagementReportTypeSelectionWrite.clearUploadedReports(engagements.map(_.id)).flatMap(result => {\n            egaWrite.cleanEGAByFundEngagementId(engagements.map(_.id))\n          })\n        }))\n      }\n      case Some(existingFund) => {\n        fundsDAO.update(newFund)\n      }\n      case _ => {\n        throw new Exception(s\"fund  ${fund.name} doesn't exist\")\n      }\n    }\n  })\n}","title":"Code check"},{"location":"/fieldnull/code/index.html#after-fix","text":"Question 1, what’s the root cause of the issue?\nThe Fund table contains redundant information of FundAdmin table The update function has multiple paths, and don’t use shared function The shared function should in out of update scope.\nQuestion 2, how to use the single truth principle to resolve issues above?","title":"After fix"},{"location":"/engagement/index.html","text":"","title":"Engagement entity add to database"},{"location":"/engagement/index.html#engagement-entity-add-to-database","text":"","title":"Engagement entity add to database"},{"location":"/engagement/index.html#user-story","text":"In PFIC system, PwC internal user could visit all their business information without restriction at beginning.\nBusiness information PFIC system has fund, company information. Fund will invest multiple companies. So the business information will includes information for funds and companies.\nBut client want to introduce engagement concept to restrict PwC internal user to handle engagement’s business information.\nEngagement PwC internal user could be in one or more engagements; One engagement will have multiple funds; One funds will invest multiple companies.","title":"User story"},{"location":"/engagement/index.html#question-about-privilege-in-different-engagement","text":"One user could be in one or more engagements, but does a same user in different engagements with different roles?","title":"Question about privilege in different engagement"},{"location":"/engagement/index.html#db-design","text":"Database as below:\nUser create table `users`(\n   `id` varchar(128) NOT NULL,\n   `email` VARCHAR(128) NOT NULL,\n   `role` VARCHAR(128) NOT NULL,\n   `engagementid` TEXT NULL,\n   PRIMARY KEY (`id`),\n   CONSTRAINT `email` UNIQUE (`email`)\n) Engagement create table `engagements`(\n   `id` varchar(128) NOT NULL,\n   `name` VARCHAR(128) NOT NULL,\n   `funds` TEXT NOT NULL,\n    PRIMARY KEY (id)\n) Fund-company CREATE TABLE fund_company_investments (\n    id varchar(128) NOT NULL, \n    fund_id varchar(255) NOT NULL,\n    company_id varchar(128) NOT NULL, \n    year INT NOT NULL,\n    PRIMARY KEY (id)\n); Fund create table `fund` (\n   `id` varchar(128) NOT NULL,\n   `name` VARCHAR(128) NOT NULL,\n    PRIMARY KEY (id)\n) Company create table `company` (\n   `id` varchar(128) NOT NULL,\n   `name` VARCHAR(128) NOT NULL,\n    PRIMARY KEY (id)\n)","title":"DB design"},{"location":"/engagement/index.html#question","text":"How could we check the user’s privilege on company and fund?\ncase class EngagementInfo(id: String, name: String, funds: Seq[String])\n\ncase class UserEngagementInfo(userRole: String, engagements: Seq[EngagementInfo],funds: Seq[String])\n\n\noverride def verifyForFund(email: String, fundId: String): Future[Boolean] = {\n  getUserEngagementInfoByEmail(email).map {\n    userEngagement =>\n      userEngagement.userRole match {\n        case \"Admin\" => true\n        case other if userEngagement.funds.contains(fundId) => true\n        case _ => false\n      }\n  }\n}\n\n\n\noverride def verifyForComapany(email: String, companyId: String, year: Int): Future[Boolean] = {\n  getUserEngagementInfoByEmail(email).flatMap {\n    userEngagement=>\n      userEngagement.userRole match{\n        case \"Admin\" => Future(true)\n        case other =>\n          val fdIds= fiCompanyInvestmentsDAO.queryByCompanyIdAndYear(companyId,year).map{\n            investSeq=>investSeq.map(_.fiId).toSet\n          }\n          val fdIdsInEng = getUserEngagementInfoByEmail(email).map{\n            engs=>engs.funds.toSet\n          }\n          val comsetF= for(s1 <- fdIds;\n                           s2 <- fdIdsInEng)\n            yield {\n              s1 &s2\n            }\n          comsetF.map{\n            comset=> !comset.isEmpty\n          }\n      }\n  }\n}","title":"Question"},{"location":"/engagement/index.html#question-two","text":"","title":"Question Two"},{"location":"/engagement/index.html#1-if-one-user-has-different-privilege-in-different-engagement-how-to-design-the-database-","text":"","title":"1. If one user has different privilege in different engagement, how to design the database?"},{"location":"/engagement/index.html#2-what-will-happen-when-user-binding-to-engagement-table-not-engagement-binging-to-user-table-","text":"","title":"2. What will happen when user binding to engagement table not engagement binging to user table?"},{"location":"/slickqueryfailed/index.html","text":"","title":"Slick query overflow"},{"location":"/slickqueryfailed/index.html#slick-query-overflow","text":"","title":"Slick query overflow"},{"location":"/slickqueryfailed/index.html#query-overflow","text":"User report a bug for table can’t be displayed:\nThere is something wrong with the get api\nConsole Console log [info] application - GET /api/engagements?page=1&pageSize=2147483647 took 117ms by admin@cn.pwc.com and returned 200\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n\n....\n\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where (`id` = ?) and (`deleted` = 'false')\n[error] c.p.d.a.s.c.CustomErrorHandler - Error occurrred\njava.util.concurrent.RejectedExecutionException: Task slick.basic.BasicBackend$DatabaseDef$$anon$2@6e97c67a rejected from slick.util.AsyncExecutor$$anon$2$$anon$1@7efc5b8f[Running, pool size = 20, active threads = 3, queued tasks = 50, completed tasks = 338]\n        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.reject(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor.execute(Unknown Source)\n        at slick.util.AsyncExecutor$$anon$2$$anon$3.execute(AsyncExecutor.scala:161)\n        at slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction(BasicBackend.scala:264)\n        at slick.basic.BasicBackend$DatabaseDef.runSynchronousDatabaseAction$(BasicBackend.scala:262)\n        at slick.jdbc.JdbcBackend$DatabaseDef.runSynchronousDatabaseAction(JdbcBackend.scala:37)\n        at slick.basic.BasicBackend$DatabaseDef.slick$basic$BasicBackend$DatabaseDef$$runInContextInline(BasicBackend.scala:241)\n        at slick.basic.BasicBackend$DatabaseDef.runInContextSafe(BasicBackend.scala:147)\n        at slick.basic.BasicBackend$DatabaseDef.runInContext(BasicBackend.scala:141)\nSo it’s seems the query triggered too many query to database, more than the database configuration.","title":"Query overflow"},{"location":"/slickqueryfailed/index.html#code-implement","text":"let see how is the query implemented?\ndef queryPageWithName(page: Int, pageSize: Int, useridOpt: Option[String], engagementidOpt: Option[String], roleOpt: Option[String]) =\n  deadbolt.Pattern()() {implicit authRequest =>\n    var filterMap = Map[String, String]()\n        ....\n    engageuserRead.listPage(page, pageSize, filterMap).flatMap(page => {\n      Future.sequence(page.items.map {\n        user1 =>\n          engagementRead.lookup(user1.engagementid).map {\n            engagementOpt =>\n              EngageuserWithName(user1, engagementOpt.get)\n          }\n      }).map {\n        engageWithName =>\n          Ok(Json.obj(\"engageuserWithName\" -> Json.toJson(engageWithName), \"total\" -> page.total))\n      }\n    })\n  }\nWith database configuration:\nmyapp = {\n  database = {\n      ...\n    numThreads = 20\n\n    queueSize = 50\n\n    maxConnections = 20\n        ...\n  }\n}\nSo we could easily know the inner query has triggered 50 query in queue of database setting, then the query failed\nLet’s see more clear about the get query:\nRequest Requet test Request URL: http://localhost:9000/api/engageuserswithname?page=1&pageSize=2147483647&roleOpt=File%20Owner\nRequest Method: GET\nStatus Code: 500 Internal Server Error\nRemote Address: [::1]:9000\nReferrer Policy: no-referrer-when-downgrade\nIn this get query, set the page size to 2147483647.","title":"Code implement"},{"location":"/slickqueryfailed/index.html#how-to-fix-","text":"","title":"How to fix?"},{"location":"/slickqueryfailed/index.html#fix-it-by-reduce-inner-query-","text":"Add new query override def listPageWithEngagement(pageNum: Int, pageSize: Int, filterMap: Map[String, String]): Future[Page[(Engageuser,Engagement)]] = {\n  val offset = pageSize * (pageNum - 1)\n  val engageUsersWithNotDeleted = for{\n    (engageusers, engagements) <- Engageusers join Engagements on ((left, right) => left.engagementid === right.id && right.deleted === \"false\" )\n  } yield (engageusers, engagements)\n\n  val defaultFilter = engageUsersWithNotDeleted.filter{ userEngagement =>\n    filterMap.get(\"engagementid\").map(someId=>userEngagement._1.engagementid.asColumnOf[String] === someId).getOrElse(true: Rep[Boolean])}\n    .filter{userEngagement =>\n      filterMap.get(\"userid\").map(someId=>userEngagement._1.userid.asColumnOf[String] like s\"%$someId%\").getOrElse(true: Rep[Boolean])}\n    .filter{userEngagement =>\n      filterMap.get(\"role\").map(role => userEngagement._1.role ===role).getOrElse(true: Rep[Boolean])\n    }\n    .filter(_._1.deleted === \"false\")\n\n  val query = defaultFilter.sortBy(_._1.createdatetime.desc).drop(offset).take(pageSize)\n  for {\n    totalRows <- db.run(defaultFilter.length.result)\n    result <- db.run(query.result).map(rows => rows.collect { case userEngagement => (engageuserRowToEngageuser(userEngagement._1), toEntity(userEngagement._2))})\n  } yield Page(result, pageNum, offset, totalRows)\n} Query Refined def queryPageWithName(page: Int, pageSize: Int, useridOpt: Option[String], engagementidOpt: Option[String], roleOpt: Option[String]) =\n  deadbolt.Pattern()() {implicit authRequest =>\n    var filterMap = Map[String, String]()\n      ...\n    engageuserRead.listPageWithEngagement(page,pageSize,filterMap).map{\n      page=>val engageWithName= page.items.map{\n        item=> EngageuserWithName(item._1,item._2)\n      }\n        Ok(Json.obj(\"engageuserWithName\" -> Json.toJson(engageWithName), \"total\" -> page.total))\n    }\n  } Console result [debug] s.j.J.statement - Preparing statement: select x2.`id`, x2.`userid`, x2.`username`, x2.`engagementid`, x2.`role`, x2.`active`, x2.`deleted`, x2.`createdatetime`, x2.`lastactivetime`, x2.`disabledtime`, x2.`meta`, x3.`id`, x3.`engagementcode`, x3.`name`, x3.`periodstart`, x3.`periodend`, x3.`auralink`, x3.`active`, x3.`deleted`, x3.`createdatetime`, x3.`meta` from `engageusers` x2, `engagements` x3 where ((x2.`role` = 'File Owner') and (x2.`deleted` = 'false')) and ((x2.`engagementid` = x3.`id`) and (x3.`deleted` = 'false')) order by x2.`createdatetime` desc limit 0,2147483647\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where `deleted` = 'false' order by `createdatetime` desc limit 0,2147483647\n[debug] s.j.J.statement - Preparing statement: select x2.`id`, x2.`userid`, x2.`username`, x2.`engagementid`, x2.`role`, x2.`active`, x2.`deleted`, x2.`createdatetime`, x2.`lastactivetime`, x2.`disabledtime`, x2.`meta`, x3.`id`, x3.`engagementcode`, x3.`name`, x3.`periodstart`, x3.`periodend`, x3.`auralink`, x3.`active`, x3.`deleted`, x3.`createdatetime`, x3.`meta` from `engageusers` x2, `engagements` x3 where ((x2.`role` = 'File Owner') and (x2.`deleted` = 'false')) and ((x2.`engagementid` = x3.`id`) and (x3.`deleted` = 'false')) order by x2.`createdatetime` desc limit 0,10\n[debug] s.j.J.statement - Preparing statement: select `id`, `engagementcode`, `name`, `periodstart`, `periodend`, `auralink`, `active`, `deleted`, `createdatetime`, `meta` from `engagements` where `deleted` = 'false' order by `createdatetime` desc limit 0,2147483647\n[info] application - GET /api/engageuserswithname?page=1&pageSize=10&roleOpt=File%20Owner took 81ms by admin@cn.pwc.com and returned 200\n[info] application - GET /api/engagements?page=1&pageSize=2147483647 took 85ms by admin@cn.pwc.com and returned 200\n[info] application - GET /api/engagements?page=1&pageSize=2147483647 took 98ms by admin@cn.pwc.com and returned 200\n[info] application - GET /api/engageuserswithname?page=1&pageSize=2147483647&roleOpt=File%20Owner took 103ms by admin@cn.pwc.com and returned 200","title":"Fix it by reduce inner query:"},{"location":"/slickqueryfailed/index.html#fix-by-reduce-the-inner-number-query-by-pagenumber","text":"The inner query is triggered by the outer pageNumber, in practical way of page query, there should not set the number to the number [pageSize=214748364]. And also increase the database queue size.","title":"Fix by reduce the inner number query by pageNumber"},{"location":"/shadowquery/index.html","text":"","title":"Shadow query"},{"location":"/shadowquery/index.html#shadow-query","text":"","title":"Shadow query"},{"location":"/shadowquery/index.html#shadow-query-issue","text":"For AWM project, when user change audit period, then updated file will be removed. The UI should be refeshed, and the “uplpaded audit files” should be “Not Started”.\nBut in our project when a fund has updated file as below:\nWhen we change audit period:\nBut the “uploaded audit files” status is not changed:\nWe could find in the network, all update are executed before the query, but the query return the wrong result.\nBut when we refresh the page, everything goes fine.","title":"Shadow query issue"},{"location":"/shadowquery/index.html#how-to-fix","text":"","title":"How to fix"},{"location":"/shadowquery/index.html#db-config-file","text":"Let see the db config file:\nmyapp = {\n  database = {\n    ...\n    // The number of threads determines how many things you can *run* in parallel\n    // the number of connections determines you many things you can *keep in memory* at the same time\n    // on the database server.\n    // numThreads = (core_count (hyperthreading included))\n    numThreads = 10\n\n    ...\n}\nWe could see the db connection numThreads is 10. When change the number to 1.\nSeems the issue is fixed.","title":"Db config file"},{"location":"/shadowquery/index.html#add-some-delay-to-the-query","text":"","title":"Add some delay to the query"},{"location":"/shadowquery/index.html#why-the-issue-happens-","text":"Let see what’s the update and query code does:\nUpdateCode private def cleanSelectionType(oldFund:Fund, newFund: Fund, fundenegagementId:String ):Future[Any]={\n   if(oldFund.fundAdmin != newFund.fundAdmin){\n     fundEngagementReportTypeSelectionDAO.deleteByEngagementId(fundenegagementId)\n   }\n   else if(!oldFund.auditPeriodBegin.equals(newFund.auditPeriodBegin) ||\n     !oldFund.auditPeriodEnd.equals(newFund.auditPeriodEnd) ||\n    !oldFund.baseCurrency.equals(newFund.baseCurrency)){\n     fundEngagementReportTypeSelectionWrite.clearUploadedReports(fundenegagementId)\n     egaWrite.cleanEGAByFundEngagementId(fundenegagementId)\n   }else {\n     Future(1)\n   }\n }\n\n override def update(fundEngagement: FundEngagementData): Future[Int] = {\n   val newFundOpt = fundEngagement.fundRecord.map{\n     record=>Json.parse(record).as[Fund]\n   }\n   val oldFunFutureOpt = fundEngagementDAO.lookup(fundEngagement.id).map{\n     fundEngagementOpt => fundEngagementOpt.flatMap{\n       fundengagementTemp=>fundengagementTemp.fundRecord.map{\n         record=>Json.parse(record).as[Fund]\n       }\n     }\n   }\n   val cleanUpTask= oldFunFutureOpt.flatMap{\n     oldFunOpt=> oldFunOpt.flatMap{\n       oldFun=> newFundOpt.map{\n         newFund => cleanSelectionType(oldFun, newFund,fundEngagement.id)\n       }\n     }match {\n       case Some(futureThing)=> futureThing\n       case _=>Future(1)\n     }\n   }\n   cleanUpTask.flatMap { result =>\n     val newFundTemp = newFundOpt.get\n     val newFundFuture =  fundAdminDAO.queryByFundAdmin(newFundTemp.fundAdmin).map{\n       tmpOpt =>tmpOpt match{\n         case Some(fundAdmin)=>newFundTemp.copy(fundAdminId = Some(fundAdmin.id))\n         case _=>newFundTemp\n       }\n     }\n     val newFund = Await.result(newFundFuture, 1 second)\n     val newFundEngagement = fundEngagement.copy(fundRecord = Some(Json.toJson(newFund).toString()))\n     fundEngagementDAO.update(newFundEngagement)\n   }\n } QueryStatus override def queryFundReportStatus(engagementId: String): Future[Seq[FundEngagementWithStatus]] = {\n  val sql = for ((((fundEnagements, funds), selections), ega)\n                   <- FundEngagement join Funds on ((left, right) => left.fundid === right.id && left.engagementid === engagementId)\n                                     joinLeft  FundEngagementReportTypeSelection on ((left, right) => left._1.id === right.fundEngagementId && right.selected === true)\n                                     joinLeft Ega on ((left, right) => left._1._1.id === right.fundEngagementId))\n    yield {\n      var isReportTypeDefined: Rep[Boolean]  = selections.isDefined\n      var hasReportUploadedContent = selections.map(_.uploadFileStatus === UploadFileStatus.success.toString)\n      var hasEgaDownloaded: Rep[Boolean] = ega.map(_.generateStatus === GenerateStatus.success.toString).getOrElse(false)\n      (fundEnagements.id, fundEnagements.engagementid, fundEnagements.fundid, funds.name, isReportTypeDefined, hasReportUploadedContent, hasEgaDownloaded)\n    }\n\n  for {\n    result <- db.run(sql.result).map(rows => rows.collect { case dataRow => (FundEngagementWithStatusBoolean.apply _).tupled(dataRow) })\n  } yield {\n    var sqlResult = result.map(item => {\n      var definedReportTypeNumber = if(item.isReportTypeDefined) 1 else 0\n      var reportUploadedNumber = if(item.hasReportUploadedPath == Some(true)) 1 else 0\n      FundEngagementWithStatus(item.fundEngagementId,item.engagementId, item.fundId, item.fundName, definedReportTypeNumber, reportUploadedNumber, item.hasEgaDownloaded)\n    })\n\n    var combineStatus = Seq[FundEngagementWithStatus]()\n    for(status <- sqlResult){\n      if(combineStatus.find(_.fundEngagementId == status.fundEngagementId).isEmpty){ // has put into combineStatus sequence\n\n        var statusWithSameFundEngagementId: Seq[FundEngagementWithStatus] = sqlResult.filter(_.fundEngagementId == status.fundEngagementId)\n\n        var definedReportNumbers:Int = 0\n        var uploadedReportNumbers:Int = 0\n        var hasEgaDownloaded:Boolean = true\n        for(fundStatus <- statusWithSameFundEngagementId){\n          definedReportNumbers = definedReportNumbers + fundStatus.definedReportTypeNumber\n          uploadedReportNumbers = uploadedReportNumbers + fundStatus.reportUploadedNumber\n          hasEgaDownloaded = hasEgaDownloaded && fundStatus.hasEgaDownloaded\n        }\n        combineStatus = combineStatus :+ FundEngagementWithStatus(status.fundEngagementId, status.engagementId, status.fundId, status.fundName, definedReportNumbers, uploadedReportNumbers, hasEgaDownloaded)\n      }\n    }\n    combineStatus\n  }\n}","title":"Why the issue happens:"},{"location":"/inconsistent/index.html","text":"","title":"Inconsistent status"},{"location":"/inconsistent/index.html#inconsistent-status","text":"Statistics query goes different for “downloaders” in User Information section and “Single EGA Download” in Fund Information section\nBut the two information comes from same api:\nclass StatisticsReadImpl @Inject()(...\n                                   slickUserlogDAO: SlickUserlogDAO)(implicit ec: ExecutionContext) extends StatisticsRead {\n  override def getAWMStatistics(): Future[AWMStatistics] = {\n      ....\n    val from = Await.result(fromFuture,Duration(1,TimeUnit.SECONDS))\n\n    val to = new Timestamp(DateTime.now.getMillis)\n    for(userNum <- statisticsDAO.getUserCount();\n      ...\n        userEgaNumDaily <-slickStatisticsDailyDAO.getEgaCountDaily(from);\n        egaNumDaily <-slickStatisticsDailyDAO.getEgaCountDaily(from);\n      ...\n    )yield AWMStatistics(Seq(\n        ....\n      StatisticRecord(\"Number of users with Single EGA downloaded daily\",userEgaNumDaily.toString),\n      StatisticRecord(\"Number of Single EGAs created daily\",egaNumDaily.toString),\n      ...\n    )\n    )\n  }\n}\nAnd we could see from UI, the query goes like:\nfetchData = () => {\n    this.props.getPureAdminUsers().then((res) => {\n     ....\n            for(var i = 0; i < data.length; i++){\n\n              downloaders += parseInt(JSON.parse(data[i].content).statisticsSeq[2].number)     [1]\n            }\n\n\n        ...\n\n\n\n  fetchData = () => {\n    if(this.state.selectDateType[0] > 0) {\n        ...\n          for(var i = 0; i < data.length; i++){\n            uploadedReports += parseInt(JSON.parse(data[i].content).statisticsSeq[4].number)    [2]\n        ...\n          }\nbut check the response body of the api:\n[{\"id\":\"9b58f780-fbd2-4557-9522-5cdcfa62cf6b\",\"createDateTime\":1585621636000,\"content\":\"{\\\"statisticsSeq\\\":\n[{\\\"name\\\":\\\"Number of users logged daily\\\",\\\"number\\\":\\\"1\\\"},\n{\\\"name\\\":\\\"Number of users that uploaded daily\\\",\\\"number\\\":\\\"1\\\"},\n{\\\"name\\\":\\\"Number of users with Single EGA downloaded daily\\\",\\\"number\\\":\\\"2\\\"},\n{\\\"name\\\":\\\"Number of Single EGAs created daily\\\",\\\"number\\\":\\\"2\\\"},\n{\\\"name\\\":\\\"Number of reports uploaded daily\\\",\\\"number\\\":\\\"15\\\"},\n{\\\"name\\\":\\\"Number of engagements created daily\\\",\\\"number\\\":\\\"0\\\"},\n{\\\"name\\\":\\\"Number of fund profiles created daily\\\",\\\"number\\\":\\\"0\\\"},\n\\\"name\\\":\\\"Number of fund processed daily\\\",\\\"number\\\":\\\"1\\\"},\n{\\\"name\\\":\\\"Number of users logged\\\",\\\"number\\\":\\\"20\\\"},\n{\\\"name\\\":\\\"Number of users that uploaded\\\",\\\"number\\\":\\\"1\\\"},\n{\\\"name\\\":\\\"Number of users with Single EGA downloaded\\\",\\\"number\\\":\\\"2\\\"},\n{\\\"name\\\":\\\"Number of Single EGAs created\\\",\\\"number\\\":\\\"11\\\"},\n{\\\"name\\\":\\\"Number of reports uploaded\\\",\\\"number\\\":\\\"80\\\"},\n{\\\"name\\\":\\\"Number of engagements created\\\",\\\"number\\\":\\\"4\\\"},\n{\\\"name\\\":\\\"Number of fund profiles created\\\",\\\"number\\\":\\\"15\\\"},\n{\\\"name\\\":\\\"Number of fund processed\\\",\\\"number\\\":\\\"11\\\"},\n{\\\"name\\\":\\\"Average number of funds per engagement\\\",\\\"number\\\":\\\"3.75\\\"},\n{\\\"name\\\":\\\"Average number of users per engagement\\\",\\\"number\\\":\\\"5.00\\\"}]}\"},\n\n....\n\n{\"id\":\"493788c6-58f5-40b5-a411-6e532d58da07\",\"createDateTime\":1577675915000,\"content\":\"{\\\"statisticsSeq\\\":\n[{\\\"name\\\":\\\"Number of users logged\\\",\\\"number\\\":\\\"17\\\"},\n{\\\"name\\\":\\\"Number of users that uploaded\\\",\\\"number\\\":\\\"7\\\"},\n{\\\"name\\\":\\\"Number of users with Single EGA downloaded\\\",\\\"number\\\":\\\"2\\\"},\n{\\\"name\\\":\\\"Number of Single EGAs created\\\",\\\"number\\\":\\\"21\\\"},\n{\\\"name\\\":\\\"Number of reports uploaded\\\",\\\"number\\\":\\\"223\\\"},\n{\\\"name\\\":\\\"Number of engagements created\\\",\\\"number\\\":\\\"4\\\"},\n{\\\"name\\\":\\\"Number of fund profiles created\\\",\\\"number\\\":\\\"10\\\"},\n{\\\"name\\\":\\\"Number of fund processed\\\",\\\"number\\\":\\\"12\\\"},\n{\\\"name\\\":\\\"Average number of funds per engagement\\\",\\\"number\\\":\\\"2.50\\\"},\n{\\\"name\\\":\\\"Average number of users per engagement\\\",\\\"number\\\":\\\"4.25\\\"}]}\"}]","title":"Inconsistent status"},{"location":"/dailyjob/index.html","text":"","title":"Daily schedule job"},{"location":"/dailyjob/index.html#daily-schedule-job","text":"","title":"Daily schedule job"},{"location":"/dailyjob/index.html#issue-","text":"In a project, there is a daily schedule job to do some work, but when we query the database, the record of daily job is not as expected:\n+--------------------------------------+---------------------+\n| id                                   | createdatetime      |\n| 493788c6-58f5-40b5-a411-6e532d58da07 | 2019-12-30 03:18:35 |\n| 4b143a14-256e-4a95-8757-15d3867a67db | 2020-01-17 08:32:03 |\n| 625b0523-cc02-4e26-ad85-17dfda3f7707 | 2020-03-06 06:43:57 |\n| 6b0094db-c5e1-449d-a387-cbf29c2e318f | 2020-03-23 02:46:16 |\n| 76fc0973-254a-4b6f-9853-950b84cbb859 | 2020-03-29 12:00:42 |\n| 878a8476-32bf-4139-bf4e-afe093c5187b | 2020-02-11 08:11:05 |\n| 9b58f780-fbd2-4557-9522-5cdcfa62cf6b | 2020-03-31 02:27:16 |\n| a9a9658b-2daa-4676-a296-1af5ff97cd54 | 2020-04-01 02:28:02 |\n| c294bf2c-fbf4-4f74-b786-e39c44c162f8 | 2020-03-27 05:23:57 |\n| c6072bc1-85eb-491b-9aaf-50a5e42b9d17 | 2020-03-20 07:16:26 |\n| d8f90fd2-8754-438f-97ee-47242a50a93f | 2020-01-08 07:17:44 |\n| e7d51849-f599-4062-bba9-97960c15d4d1 | 2020-03-04 06:44:10 |\n| e8123059-7daa-46c0-b902-7f4540a4179e | 2020-02-28 09:16:14 |\n| f6e98a8a-a10c-44d7-b4a0-599ce8025224 | 2020-02-19 02:33:32 |\n\n\n\nn| id                                   | createdatetime      | content|\nn| 1921eea1-721f-44fc-9635-87bfc463c4f0 | 2020-03-28 12:00:41 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"3\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"3\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"40\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"2\"},{\"name\":\"Number of fund processed daily\",\"number\":\"3\"},{\"name\":\"Number of users logged\",\"number\":\"20\"},{\"name\":\"Number of users that uploaded\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"9\"},{\"name\":\"Number of reports uploaded\",\"number\":\"65\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"15\"},{\"name\":\"Number of fund processed\",\"number\":\"12\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"5.00\"}]} |\n| 493788c6-58f5-40b5-a411-6e532d58da07 | 2019-12-30 03:18:35 | {\"statisticsSeq\":[{\"name\":\"Number of users logged\",\"number\":\"17\"},{\"name\":\"Number of users that uploaded\",\"number\":\"7\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"21\"},{\"name\":\"Number of reports uploaded\",\"number\":\"223\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"10\"},{\"name\":\"Number of fund processed\",\"number\":\"12\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"2.50\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.25\"}]}                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| 4b143a14-256e-4a95-8757-15d3867a67db | 2020-01-17 08:32:03 | {\"statisticsSeq\":[{\"name\":\"Number of users logged\",\"number\":\"18\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"44\"},{\"name\":\"Number of reports uploaded\",\"number\":\"331\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"27\"},{\"name\":\"Number of fund processed\",\"number\":\"28\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"6.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.50\"}]}                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| 625b0523-cc02-4e26-ad85-17dfda3f7707 | 2020-03-06 06:43:57 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"0\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"0\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"0\"},{\"name\":\"Number of users logged\",\"number\":\"16\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"55\"},{\"name\":\"Number of reports uploaded\",\"number\":\"407\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"17\"},{\"name\":\"Number of fund processed\",\"number\":\"14\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"4.25\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.00\"}]} |\n| 6b0094db-c5e1-449d-a387-cbf29c2e318f | 2020-03-23 02:46:16 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"0\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"0\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"0\"},{\"name\":\"Number of users logged\",\"number\":\"19\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"59\"},{\"name\":\"Number of reports uploaded\",\"number\":\"432\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"18\"},{\"name\":\"Number of fund processed\",\"number\":\"17\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"4.50\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.75\"}]} |\n| 76fc0973-254a-4b6f-9853-950b84cbb859 | 2020-03-29 12:00:42 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"0\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"0\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"0\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"0\"},{\"name\":\"Number of users logged\",\"number\":\"20\"},{\"name\":\"Number of users that uploaded\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"9\"},{\"name\":\"Number of reports uploaded\",\"number\":\"65\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"15\"},{\"name\":\"Number of fund processed\",\"number\":\"11\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"5.00\"}]} |\n| 878a8476-32bf-4139-bf4e-afe093c5187b | 2020-02-11 08:11:05 | {\"statisticsSeq\":[{\"name\":\"Number of users logged\",\"number\":\"19\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"47\"},{\"name\":\"Number of reports uploaded\",\"number\":\"358\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"27\"},{\"name\":\"Number of fund processed\",\"number\":\"28\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"6.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.75\"}]}                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| 9b58f780-fbd2-4557-9522-5cdcfa62cf6b | 2020-03-31 02:27:16 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"1\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"2\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"15\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"1\"},{\"name\":\"Number of users logged\",\"number\":\"20\"},{\"name\":\"Number of users that uploaded\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"11\"},{\"name\":\"Number of reports uploaded\",\"number\":\"80\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"15\"},{\"name\":\"Number of fund processed\",\"number\":\"11\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"5.00\"}]} |\n| a9a9658b-2daa-4676-a296-1af5ff97cd54 | 2020-04-01 02:28:02 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"3\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"1\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"1\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"2\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"1\"},{\"name\":\"Number of users logged\",\"number\":\"21\"},{\"name\":\"Number of users that uploaded\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"12\"},{\"name\":\"Number of reports uploaded\",\"number\":\"82\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"15\"},{\"name\":\"Number of fund processed\",\"number\":\"12\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"5.25\"}]} |\n| c294bf2c-fbf4-4f74-b786-e39c44c162f8 | 2020-03-27 05:23:57 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"0\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"0\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"0\"},{\"name\":\"Number of fund processed daily\",\"number\":\"0\"},{\"name\":\"Number of users logged\",\"number\":\"19\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"59\"},{\"name\":\"Number of reports uploaded\",\"number\":\"432\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"13\"},{\"name\":\"Number of fund processed\",\"number\":\"12\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.25\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.75\"}]} |\n| c6072bc1-85eb-491b-9aaf-50a5e42b9d17 | 2020-03-20 07:16:26 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"3\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"4\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"8\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"5\"},{\"name\":\"Number of fund processed daily\",\"number\":\"5\"},{\"name\":\"Number of users logged\",\"number\":\"19\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"59\"},{\"name\":\"Number of reports uploaded\",\"number\":\"430\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"21\"},{\"name\":\"Number of fund processed\",\"number\":\"19\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"5.25\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.75\"}]} |\n| d8f90fd2-8754-438f-97ee-47242a50a93f | 2020-01-08 07:17:44 | {\"statisticsSeq\":[{\"name\":\"Number of users logged\",\"number\":\"17\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"39\"},{\"name\":\"Number of reports uploaded\",\"number\":\"280\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"29\"},{\"name\":\"Number of fund processed\",\"number\":\"31\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"7.25\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.25\"}]}                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| e7d51849-f599-4062-bba9-97960c15d4d1 | 2020-03-04 06:44:10 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"1\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"0\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"0\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"0\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"1\"},{\"name\":\"Number of fund processed daily\",\"number\":\"1\"},{\"name\":\"Number of users logged\",\"number\":\"16\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"55\"},{\"name\":\"Number of reports uploaded\",\"number\":\"407\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"17\"},{\"name\":\"Number of fund processed\",\"number\":\"14\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"4.25\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.00\"}]} |\n| e8123059-7daa-46c0-b902-7f4540a4179e | 2020-02-28 09:16:14 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"2\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"2\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"6\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"6\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"33\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"6\"},{\"name\":\"Number of fund processed daily\",\"number\":\"8\"},{\"name\":\"Number of users logged\",\"number\":\"16\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"55\"},{\"name\":\"Number of reports uploaded\",\"number\":\"407\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"15\"},{\"name\":\"Number of fund processed\",\"number\":\"13\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.75\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.00\"}]} |\n| f6e98a8a-a10c-44d7-b4a0-599ce8025224 | 2020-02-19 02:33:32 | {\"statisticsSeq\":[{\"name\":\"Number of users logged daily\",\"number\":\"0\"},{\"name\":\"Number of users that uploaded daily\",\"number\":\"2\"},{\"name\":\"Number of users with Single EGA downloaded daily\",\"number\":\"2\"},{\"name\":\"Number of Single EGAs created daily\",\"number\":\"2\"},{\"name\":\"Number of reports uploaded daily\",\"number\":\"16\"},{\"name\":\"Number of engagements created daily\",\"number\":\"0\"},{\"name\":\"Number of fund profiles created daily\",\"number\":\"3\"},{\"name\":\"Number of fund processed daily\",\"number\":\"4\"},{\"name\":\"Number of users logged\",\"number\":\"19\"},{\"name\":\"Number of users that uploaded\",\"number\":\"8\"},{\"name\":\"Number of users with Single EGA downloaded\",\"number\":\"4\"},{\"name\":\"Number of Single EGAs created\",\"number\":\"49\"},{\"name\":\"Number of reports uploaded\",\"number\":\"374\"},{\"name\":\"Number of engagements created\",\"number\":\"4\"},{\"name\":\"Number of fund profiles created\",\"number\":\"12\"},{\"name\":\"Number of fund processed\",\"number\":\"12\"},{\"name\":\"Average number of funds per engagement\",\"number\":\"3.00\"},{\"name\":\"Average number of users per engagement\",\"number\":\"4.75\"}]} |\nnWhat’s the daily job do:\nclass ScheduledTasks @Inject()(...\n                               statisticslogWrite: StatisticslogWrite)(implicit executionContext: ExecutionContext) {\n\n\n  if(isScheduledHost){\n    actorSystem.scheduler.schedule(initialDelay = 10.seconds + Random.nextInt(100).seconds, interval = 1.day + Random.nextInt(100).seconds) {\n      // the block of code that will be executed\n      Await.result( statisticslogWrite.takeSnap(), 10 seconds)\n      Await.result(fundsWrite.cleanExpiredFund(), 10 seconds)\n      Await.result(fundEngagementWrite.cleanExpiredFundEngagement(), 10 seconds)\n      Await.result(fundEngagementReportTypeSelectionWrite.cleanExpiredTypeSelection(), 10 seconds)\n      egaWrite.cleanExpiredEga()\n    }\n  }\n}\nHow to fix:\nclass ScheduledTasks @Inject()(...\n                               statisticslogWrite: StatisticslogWrite)(implicit executionContext: ExecutionContext) {\n\n  if(isScheduledHost){\n    actorSystem.scheduler.schedule(initialDelay = 10.seconds + Random.nextInt(100).seconds, interval = 1.day + Random.nextInt(100).seconds) {\n      for{\n        _ <- statisticslogWrite.takeSnap();\n        _ <-fundsWrite.cleanExpiredFund();\n        _ <-fundEngagementWrite.cleanExpiredFundEngagement();\n        _<-fundEngagementReportTypeSelectionWrite.cleanExpiredTypeSelection();\n        _<-egaWrite.cleanExpiredEga()\n\n      }yield ( Logger.apply(this.getClass.toString).info(\"Daily operation success\") )\n    }\n  }\n}","title":"Issue:"},{"location":"/pac4j/index.html","text":"","title":"Oauth2 client for Pac4j"},{"location":"/pac4j/index.html#oauth2-client-for-pac4j","text":"","title":"Oauth2 client for Pac4j"},{"location":"/pac4j/index.html#whats-pac4j-do-","text":"Pac4j will maintain a “profile” for authenticated user:","title":"What’s pac4j do?"},{"location":"/pac4j/index.html#1-user-will-specify-the-client-used-for-application-","text":"def secureAction[A](action: Action[A]): Action[A] = Secure(\"PwCClient\").async(action.parser) { implicit request =>\n...\n}","title":"1. User will specify the client used for application:"},{"location":"/pac4j/index.html#2-pac4j-will-first-query-profile","text":"and there is no profile exist yet:","title":"2. Pac4j will first query profile"},{"location":"/pac4j/index.html#3-client-will-start-oauth2-authentication-","text":"","title":"3. Client will start Oauth2 authentication:"},{"location":"/pac4j/index.html#get-authorize","text":"User will redirect to authorization portal\nAfter user authorized, then the authorization portal will post back with token for user:","title":"Get authorize"},{"location":"/pac4j/index.html#get-access-token","text":"Then use the authorized token to change the access token:","title":"Get access token"},{"location":"/pac4j/index.html#get-user-information","text":"User the access token to get user information","title":"Get user information"},{"location":"/pac4j/index.html#4-then-the-pac4j-will-use-the-user-information-to-create-a-profile-for-user-","text":"","title":"4. Then the pac4j will use the user information to create a profile for user:"},{"location":"/pac4j/index.html#5-when-profile-is-stored-in-session-user-profile-could-be-get-when-user-visit-restricted-resources-","text":"and redirect to the resources:","title":"5. When profile is stored in session, user profile could be get when user visit restricted resources:"},{"location":"/nio/index.html","text":"","title":"NIO and Akka-Http"},{"location":"/nio/index.html#nio-and-akka-http","text":"","title":"NIO and Akka-Http"},{"location":"/nio/index.html#whats-java-nio-","text":"See the : Java NIO浅析","title":"What’s Java NIO?"},{"location":"/nio/index.html#whats-relationship-about-java-nio-and-akka-http-","text":"Akka IO is based on Java NIO library:\npackage akka.io\n\nimport java.util.{ Iterator ⇒ JIterator }\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.nio.channels.{ SelectableChannel, SelectionKey, CancelledKeyException }\nimport java.nio.channels.SelectionKey._\nBut is Akka-Http is same as Jetty or Netty?\nNo, you could find the answer from Understanding Reactive IO and Back-Pressure with (your own) Akka Http Server","title":"What’s relationship about Java NIO and Akka-Http:"},{"location":"/nio/index.html#why-akka-http-is-introduced-","text":"Well, the main answer is in the same Understanding Reactive IO and Back-Pressure with (your own) Akka Http Server.","title":"Why Akka-http is introduced?"},{"location":"/nio/index.html#go-through-the-article","text":"We will quickly go throught this article:\nThe classical Java BIO can’t fit the requirement\nMost web servers used to use thread per connection model to handle http requests. In this model, the\nservers also used to use blocking IO libraries to read requests from connections and write responses.This works well when connections are short lived. Traditionally, most http requests used to be short\nlived. A client opened a connection, sent request, read the response and closed the connection. This\nallowed servers to have a fixed thread pool to serve the requests and use blocking IO to read and\nwrite to connections. Using blocking IO, also allowed having synchronous APIs, which is a simple\nprogramming model to work with.\n\nThis model created a big problem with changing patterns of web requests though.\n\nTo support Keep-Alive connections, http pipelining, servers could no longer rely on blocking IO and\n threads only. Apache, as of version 2.4 uses evented IO to handle connections\n\n(https://httpd.apache.org/docs/2.4/mod/event.html)\nYou may want to see the Appache MPM Event\nThen there will intruce some Java NIO design pattern throw :Scalable IO in Java { open=new }. The short version from: Scalable IO in Java Because the actor is lightweight, so we could use create an Actor per connection. Actor could also resolve the state management difficult comparing use Java framework. (This solution is just use Actor to hold working thread.) For the back pressure issue, then introduce with Streaming method, which is the Akka-Http.","title":"Go through the article"},{"location":"/nio/code/appacheMPMEvent.html","text":"","title":"Apache MPM event"},{"location":"/nio/code/appacheMPMEvent.html#apache-mpm-event","text":"The original artical from Apache MPM event","title":"Apache MPM event"},{"location":"/nio/code/appacheMPMEvent.html#summary","text":"The event Multi-Processing Module (MPM) is designed to allow more requests to be served simultaneously by passing off some processing work to the listeners threads, freeing up the worker threads to serve new requests.\nTo use the event MPM, add –with-mpm=event to the configure script’s arguments when building the httpd.","title":"Summary"},{"location":"/nio/code/appacheMPMEvent.html#relationship-with-the-worker-mpm","text":"event is based on the worker MPM, which implements a hybrid multi-process multi-threaded server. A single control process (the parent) is responsible for launching child processes. Each child process creates a fixed number of server threads as specified in the ThreadsPerChild directive, as well as a listener thread which listens for connections and passes them to a worker thread for processing when they arrive.\nRun-time configuration directives are identical to those provided by worker, with the only addition of the AsyncRequestWorkerFactor.","title":"Relationship with the Worker MPM"},{"location":"/nio/code/appacheMPMEvent.html#how-it-works","text":"This MPM tries to fix the ‘keep alive problem’ in HTTP. After a client completes the first request, it can keep the connection open, sending further requests using the same socket and saving significant overhead in creating TCP connections. However, Apache HTTP Server traditionally keeps an entire child process/thread waiting for data from the client, which brings its own disadvantages. To solve this problem, this MPM uses a dedicated listener thread for each process to handle both the Listening sockets, all sockets that are in a Keep Alive state, sockets where the handler and protocol filters have done their work and the ones where the only remaining thing to do is send the data to the client.\nThis new architecture, leveraging non-blocking sockets and modern kernel features exposed by APR (like Linux’s epoll), no longer requires the mpm-accept Mutex configured to avoid the thundering herd problem.\nThe total amount of connections that a single process/threads block can handle is regulated by the AsyncRequestWorkerFactor directive.","title":"How it Works"},{"location":"/nio/code/appacheMPMEvent.html#async-connections","text":"Async connections would need a fixed dedicated worker thread with the previous MPMs but not with event. The status page of mod_status shows new columns under the Async connections section:","title":"Async connections"},{"location":"/nio/code/appacheMPMEvent.html#writing","text":"While sending the response to the client, it might happen that the TCP write buffer fills up because the connection is too slow. Usually in this case, a write() to the socket returns EWOULDBLOCK or EAGAIN to become writable again after an idle time. The worker holding the socket might be able to offload the waiting task to the listener thread, that in turn will re-assign it to the first idle worker thread available once an event will be raised for the socket (for example, “the socket is now writable”). Please check the Limitations section for more information.","title":"Writing"},{"location":"/nio/code/appacheMPMEvent.html#keep-alive","text":"Keep Alive handling is the most basic improvement from the worker MPM. Once a worker thread finishes to flush the response to the client, it can offload the socket handling to the listener thread, that in turn will wait for any event from the OS, like “the socket is readable”. If any new request comes from the client, then the listener will forward it to the first worker thread available. Conversely, if the KeepAliveTimeout occurs then the socket will be closed by the listener. In this way, the worker threads are not responsible for idle sockets, and they can be re-used to serve other requests.","title":"Keep-alive"},{"location":"/nio/code/appacheMPMEvent.html#closing","text":"Sometimes the MPM needs to perform a lingering close, namely sending back an early error to the client while it is still transmitting data to httpd. Sending the response and then closing the connection immediately is not the correct thing to do since the client (still trying to send the rest of the request) would get a connection reset and could not read the httpd’s response. The lingering close is time-bounded, but it can take a relatively long time, so it’s offloaded to a worker thread (including the shutdown hooks and real socket close). From 2.4.28 onward, this is also the case when connections finally timeout (the listener thread never handles connections besides waiting for and dispatching their events). These improvements are valid for both HTTP/HTTPS connections.","title":"Closing"},{"location":"/nio/code/scalableIOInJava.html","text":"","title":"Scalable IO in Java"},{"location":"/nio/code/scalableIOInJava.html#scalable-io-in-java","text":"The original reference is from Scalable IO in Java { open=new }","title":"Scalable IO in Java"},{"location":"/nio/code/scalableIOInJava.html#classic-way-of-handle-one-requst-pre-thread","text":"Add design multiple implementations of Event Driven design","title":"Classic way of handle one requst pre thread"},{"location":"/nio/code/scalableIOInJava.html#single-threaded-version-","text":"","title":"Single threaded version [Nodejs]"},{"location":"/nio/code/scalableIOInJava.html#thread-pool-version","text":"","title":"Thread Pool version"},{"location":"/nio/code/scalableIOInJava.html#multiple-reactor","text":"","title":"Multiple reactor"}]}