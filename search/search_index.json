{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"software architecture"},{"location":"/index.html#software-architecture","text":"What’s reality of software development? What’re challenges of software development? The reactive manifesto Doradilla design References","title":"software architecture"},{"location":"/sub/reality.html","text":"","title":"Whats reality of software development?"},{"location":"/sub/reality.html#whats-reality-of-software-development-","text":"","title":"What’s reality of software development?"},{"location":"/sub/reality.html#","text":"Code for authentication:\nFor application authentication, there are 3 types: by application, by SAML at first stage, and add by Oauth in later version. For authorization, there is not needed any change for different change.\nCode for frontend controller lazy val secureSource = config.getOptional[Boolean](\"useidam\") match {\n   case Some(true) => config.getOptional[Boolean](\"pwcoauth.useoauth\") match {\n     case Some(true) => index3\n     case _ => index2\n   }\n   case _ => index\n }\n\n def index2: Action[AnyContent] = {\n   secureAction(\n     assets.at(\"index.html\")\n   )\n }\n\n def index3: Action[AnyContent] = {\n   secureActionOauth(\n     assets.at(\"index.html\")\n   )\n }\n\n def index: Action[AnyContent] = assets.at(\"index.html\") Saml def secureAction[A](action: Action[A]): Action[A] = Secure(\"SAML2Client\").async(action.parser) { implicit request =>\n  ...\n  val userInfoMap = Map(\"email\"->profiles.head.getAttribute(emailAttrStr).toString.stripPrefix(\"[\").stripSuffix(\"]\"))\n  ...\n  userTimeOpt match {\n    case Some(userTime) if nowTime - userTime.toInt > maxTimeout =>\n      Future( Redirect(\"/\").flashing(\"success\" -> \"Session timeout, you need to login.\")\n        .discardingCookies(DiscardingCookie(\"PLAY_SESSION\")).withNewSession.withHeaders(\"Cache-Control\"-> \"no-cache\"))\n    case _=>    action(request).map {\n      result =>\n        result.withSession(request.session.+(\"email\"->userInfoMap(\"email\"))\n          .+(\"useidm\"->\"true\")\n          .+(\"userTime\"->nowTime.toString)\n          .+(\"privilege\" -> privilege)).withHeaders(\"Cache-Control\"-> \"no-cache\")\n    }\n  }\n} Oauth def secureActionOauth[A](action: Action[A]): Action[A] = Secure(\"PwCClient\").async(action.parser) { implicit request =>\n  ...\n  val userInfoMap = Map(\"email\"->profiles.head.getAuthenticationAttribute(\"email\").toString)\n  updateUserLastActiveTime(userInfoMap.get(\"email\"))\n  ...\n  userTimeOpt match {\n    case Some(userTime) if nowTime - userTime.toInt > maxTimeout =>\n      Future( Redirect(\"/\").flashing(\"success\" -> \"Session timeout, you need to login.\")\n        .discardingCookies(DiscardingCookie(\"PLAY_SESSION\")).withNewSession.withHeaders(\"Cache-Control\"-> \"no-cache\"))\n    case _=>    action(request).map {\n      result =>\n        result.withSession(request.session.+(\"email\"->userInfoMap(\"email\"))\n          .+(\"useidm\"->\"true\")\n          .+(\"userTime\"->nowTime.toString)\n          .+(\"privilege\" -> privilege)).withHeaders(\"Cache-Control\"-> \"no-cache\")\n          .bakeCookies()\n    }\n  }\n} Authentication def createEngageuser() =\n  deadbolt.Pattern(value = \"(v_admin)|(v_lead)\", patternType = PatternType.REGEX)(trim(parse.json)) {implicit authRequest =>\n    // Action.async(trim(parse.json)) { implicit authRequest =>\n    try {\n        ...\n    } catch {\n      case ValidationException(msg) => Future(BadRequest(msg))\n    }\n  }","title":"Big ball of mud"},{"location":"/sub/issues.html","text":"","title":"Whatre challenges of software development?"},{"location":"/sub/issues.html#whatre-challenges-of-software-development-","text":"","title":"What’re challenges of software development?"},{"location":"/sub/issues.html#about-lock","text":"Lock in Java\nImplementation of lock","title":"About lock"},{"location":"/sub/issues.html#how-to-change-wheels-when-driving-","text":"What’s function in the developer’s view?\nval fx = A => B\nor\ndef fx(par1:Any, par2:Any,...):Any ={\n   doA(par1)\n   if(par2){\n     doB(par2)\n   }\n }\nFor example:\nWe need to query price data with business logic which is not confirmed by LoS people:\nGetByEngagementName def getEngagementSecurityPrice() = Action.async(trim(parse.json)) { implicit request => {\n    ...\n  egaRead.lookupByFundEngagementId(fundEngagementId).flatMap {\n    egaOpt =>\n      egaOpt.flatMap(_.securityItems).map(str => Json.parse(str).as[EngagementSecurity]).map {\n        engageSecurity =>\n          Future(engageSecurity.items.map {\n            securityItem =>\n              getSecrurityPrivceOrderd(securityItem.isin,securityItem.currency.getOrElse(\"\"),  date, securityItem.catagory, priceAndSource)\n          }.flatten)\n      }.getOrElse(Future(Seq()))\n  }\n}\n} GetBySecuritypriceAndOrder private def getSecrurityPrivceOrderd(isin: String,currency:String,  pricedate: String, securityType: String, priceAndSource: PriceAndSource): Seq[SecurityPrice] = {\n  var continueQuery = true\n  val sourceFrom = securityType match {\n    case \"Standard\" => priceAndSource.standard\n    case \"Future\" => priceAndSource.future\n    case \"Option\" => priceAndSource.option\n    case _ => priceAndSource.other\n  }\n  var result: Seq[SecurityPrice] = Seq()\n  val res2 = getByIsinAndDate(isin, currency, pricedate)\n  if(res2.map(_.exchange).toSet.toSeq.length ==1){\n    result =res2\n  }else\n  {\n    var priceType = \"\"\n    var source = \"\"\n    for (priceType <- priceAndSource.priceOrder) {\n      for (source <- sourceFrom) {\n        if (continueQuery && priceType.length>0  && source.length >0) {\n          val ret = getSecurityPriceByPriceAndOrder(isin, pricedate, priceType, currency,source)\n          if (ret.length > 0) {\n            continueQuery = false\n            result = ret\n          }\n        }\n      }\n    }\n  }\n  result\n} QeuryData private def getByIsinAndDate(isin: String,currency:String,  pricedate: String) = {\n  val securityPriceQuery = SecurityPriceQuery(None, None, Some(isin), None, None, None, None,Some(currency), pricedate)\n  Await.result(securityPriceRead.query(securityPriceQuery), 1 second)\n}\n\nprivate def getSecurityPriceByPriceAndOrder(isin: String, pricedate: String, priceType: String, currency:String, source: String): Seq[SecurityPrice] = {\n  val securityPriceQuery = SecurityPriceQuery(None, None, Some(isin), None, Some(priceType), Some(source), None, Some(currency),  pricedate)\n  Await.result(securityPriceRead.query(securityPriceQuery), 1 second)\n}\n\ncase class SecurityPriceQuery(cname: Option[String], gsp: Option[String], isin: Option[String], assetclass: Option[String],\n                              pricetype: Option[String], source: Option[String], exchange: Option[String], currency: Option[String],pricedate: String) QueryInDatabase override def query(securityPriceQuery: SecurityPriceQuery): Future[Seq[SecurityPrice]] = {\n  val query = Securityprices.filter(securityPrice => securityPriceQuery.cname.map(cname => securityPrice.cname === cname).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.gsp.map(gsp => securityPrice.gsp === gsp).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.isin.map(isin => securityPrice.isin === isin).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.assetclass.map(assetclass => securityPrice.assetclass === assetclass).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.pricetype.map(priceType => securityPrice.pricetype like(s\"%$priceType%\")).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.source.map(source => securityPrice.source === source).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.exchange.map(exchange => securityPrice.exchange === exchange).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPriceQuery.currency.map(currency => securityPrice.currency === currency).getOrElse(true: Rep[Boolean]))\n    .filter(securityPrice => securityPrice.pricedate === securityPriceQuery.pricedate)\n  db.run(query.result).map {\n    maybeRow => maybeRow.map(rowToEntity)\n  }\n}","title":"How to change wheels when driving?"},{"location":"/sub/reactive.html","text":"","title":"The reactive manifesto"},{"location":"/sub/reactive.html#the-reactive-manifesto","text":"Reactive manifesto","title":"The reactive manifesto"},{"location":"/sub/doradilla.html","text":"","title":"Doradilla design"},{"location":"/sub/doradilla.html#doradilla-design","text":"","title":"Doradilla design"},{"location":"/sub/doradilla.html#","text":"Code implementation for JobApi: Named-job api is need after anonymous api is released.\nAnonymous processor call trait ProcessTranApi extends AskProcessResult{\n  this: SystemApi with DriverApi =>\n  val processTranActor = actorSystem.actorOf(ProcessTranActor.processTranActorProps, CNaming.timebasedName( \"defaultProcessTranActor\"))\n\n  def runProcessCommand(processCallMsg: ProcessCallMsg, timeout: Timeout = longTimeout)(implicit ex: ExecutionContext): Future[JobResult] = {\n    val processJob = JobMsg(\"SimpleProcess\", processCallMsg)\n    val receiveActor = actorSystem.actorOf(ReceiveActor.receiveActorProps, CNaming.timebasedName( \"Receive\"))\n    val processJobRequest = JobRequest(processJob, receiveActor, processTranActor)\n    getProcessCommandFutureResult(processJobRequest, defaultDriver, receiveActor,timeout)\n  }\n} Named job call trait NamedJobRunner {\n  this: BackendServer.type =>\n\n  def runNamedProcessCommand(processJob: JobMsg,\n                             jobName:String,\n                             timeout: Timeout = ConstVars.longTimeOut,\n                             priority: Option[Int] = None)(implicit ex: ExecutionContext): Future[JobResult] = {\n    val jobApi = getNamedJobApi(jobName)\n    val receiveActor = jobApi.actorSystem.actorOf(ReceiveActor.receiveActorProps, CNaming.timebasedName(\"Receive\"))\n    val processJobRequest = JobRequest(processJob, receiveActor, jobApi.processTranActor, priority)\n    getProcessCommandFutureResult(processJobRequest, jobApi.defaultDriver, receiveActor,timeout)\n  }\n} Use in AWM def runProcess(paras : List[Object], clazzName:String, methodName:String, prioritySet: Option[Int] = None) ={\n  println(clazzName)\n  val msg = ProcessCallMsg(clazzName,methodName,paras.map{_.asInstanceOf[AnyRef]}.toArray)\n  val jobMsg = JobMsg(\"SimpleProcess\",msg)\n  BackendServer.runProcessCommand(jobMsg,priority = prioritySet)\n} Use in CIDR def runProcess(paras : List[AnyRef], clazzName:String, methodName:String, prioritySet: Option[Int] = None) ={\n  val setTimeOut:Timeout = 6000 seconds\n  val msg = ProcessCallMsg(clazzName,methodName,paras.map{_.asInstanceOf[AnyRef]}.toArray)\n  val jobMsg = JobMsg(\"SimpleProcessFuture\",msg)\n  val namedSevice = Seq(\"com.pwc.ds.cidr.project.creditreview.processors.OcrPlusProcessor\")\n  if(namedSevice.contains(clazzName)){\n    BackendServer.runNamedProcessCommand(jobMsg,OCRJOBStr, priority = prioritySet,timeout = setTimeOut).map{\n      jobResult=>\n        if((jobResult.result.asInstanceOf[ProcessResult]).jobStatus.toString == \"Failed\" ){\n          throw new RuntimeException(jobResult.result.asInstanceOf[ProcessResult].result.asInstanceOf[Exception].getMessage)\n        }\n        jobResult.result.asInstanceOf[ProcessResult].result.asInstanceOf[ProcessorResultValue]\n    }\n  }else{\n    BackendServer.runProcessCommand(jobMsg,priority = prioritySet,timeout = setTimeOut).map{\n      jobResult=>\n        if((jobResult.result.asInstanceOf[ProcessResult]).jobStatus.toString == \"Failed\" ){\n          throw new RuntimeException(jobResult.result.asInstanceOf[ProcessResult].result.asInstanceOf[Exception].getMessage)\n        }\n        jobResult.result.asInstanceOf[ProcessResult].result.asInstanceOf[ProcessorResultValue]\n    }\n  }\n}","title":"Message flow"},{"location":"/sub/reference.html","text":"","title":"References"},{"location":"/sub/reference.html#references","text":"Big ball of mud\nThe Reactive Manifesto\n噢，你的代码像一坨翔。然后呢？\n噢，你的代码像一坨翔。甩锅呗！","title":"References"}]}